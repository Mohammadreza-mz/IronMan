

#include <stdio.h>
#include "ap_fixed.h"

void case_52(
    ap_int<16> in_data[30],
    ap_int<16> out_data[20]
)
{

#pragma HLS array_partition variable=in_data complete
#pragma HLS array_partition variable=out_data complete

    

ap_int<6> in1;
in1.range(5, 0) = in_data[0].range(5, 0);
ap_int<13> in2;
in2.range(12, 0) = in_data[1].range(12, 0);
ap_int<3> in3;
in3.range(2, 0) = in_data[2].range(2, 0);
ap_int<3> in4;
in4.range(2, 0) = in_data[3].range(2, 0);
ap_int<6> in5;
in5.range(5, 0) = in_data[4].range(5, 0);
ap_int<15> in6;
in6.range(14, 0) = in_data[5].range(14, 0);
ap_int<16> in7;
in7.range(15, 0) = in_data[6].range(15, 0);
ap_int<14> in8;
in8.range(13, 0) = in_data[7].range(13, 0);
ap_int<5> in9;
in9.range(4, 0) = in_data[8].range(4, 0);
ap_int<8> in10;
in10.range(7, 0) = in_data[9].range(7, 0);
ap_int<10> in11;
in11.range(9, 0) = in_data[10].range(9, 0);
ap_int<5> in12;
in12.range(4, 0) = in_data[11].range(4, 0);
ap_int<5> in13;
in13.range(4, 0) = in_data[12].range(4, 0);
ap_int<14> in14;
in14.range(13, 0) = in_data[13].range(13, 0);
ap_int<12> in15;
in15.range(11, 0) = in_data[14].range(11, 0);
ap_int<10> in16;
in16.range(9, 0) = in_data[15].range(9, 0);
ap_int<16> in17;
in17.range(15, 0) = in_data[16].range(15, 0);
ap_int<2> in18;
in18.range(1, 0) = in_data[17].range(1, 0);
ap_int<3> in19;
in19.range(2, 0) = in_data[18].range(2, 0);
ap_int<12> in20;
in20.range(11, 0) = in_data[19].range(11, 0);
ap_int<8> in21;
in21.range(7, 0) = in_data[20].range(7, 0);
ap_int<13> in22;
in22.range(12, 0) = in_data[21].range(12, 0);
ap_int<6> in23;
in23.range(5, 0) = in_data[22].range(5, 0);
ap_int<9> in24;
in24.range(8, 0) = in_data[23].range(8, 0);
ap_int<6> in25;
in25.range(5, 0) = in_data[24].range(5, 0);
ap_int<13> in26;
in26.range(12, 0) = in_data[25].range(12, 0);
ap_int<5> in27;
in27.range(4, 0) = in_data[26].range(4, 0);
ap_int<8> in28;
in28.range(7, 0) = in_data[27].range(7, 0);
ap_int<14> in29;
in29.range(13, 0) = in_data[28].range(13, 0);
ap_int<13> in30;
in30.range(12, 0) = in_data[29].range(12, 0);

ap_int<3> m31;
ap_int<13> m32;
ap_int<14> m33;
ap_int<13> m34;
ap_int<14> m35;
ap_int<11> m36;
ap_int<4> m37;
ap_int<12> m38;
ap_int<7> m39;
ap_int<11> m40;
ap_int<10> m41;
ap_int<15> m42;
ap_int<5> m43;
ap_int<7> m44;
ap_int<14> m45;
ap_int<16> m46;
ap_int<10> m47;
ap_int<3> m48;
ap_int<7> m49;
ap_int<5> m50;
ap_int<6> m51;
ap_int<9> m52;
ap_int<12> m53;
ap_int<7> m54;
ap_int<6> m55;
ap_int<8> m56;
ap_int<4> m57;
ap_int<16> m58;
ap_int<14> m59;
ap_int<8> m60;
ap_int<13> m61;
ap_int<11> m62;
ap_int<14> m63;
ap_int<12> m64;
ap_int<8> m65;
ap_int<11> m66;
ap_int<11> m67;
ap_int<8> m68;
ap_int<4> m69;
ap_int<9> m70;
ap_int<12> m71;
ap_int<10> m72;
ap_int<10> m73;
ap_int<8> m74;
ap_int<14> m75;
ap_int<10> m76;
ap_int<8> m77;
ap_int<12> m78;
ap_int<16> m79;
ap_int<16> m80;
ap_int<12> m81;
ap_int<15> m82;
ap_int<14> m83;
ap_int<16> m84;
ap_int<9> m85;
ap_int<6> m86;
ap_int<16> m87;
ap_int<13> m88;
ap_int<14> m89;
ap_int<16> m90;
ap_int<10> m91;
ap_int<16> m92;
ap_int<10> m93;
ap_int<12> m94;
ap_int<8> m95;
ap_int<14> m96;
ap_int<16> m97;
ap_int<15> m98;
ap_int<12> m99;
ap_int<15> m100;
ap_int<14> m101;
ap_int<15> m102;
ap_int<16> m103;
ap_int<13> m104;
ap_int<7> m105;
ap_int<9> m106;
ap_int<6> m107;
ap_int<7> m108;
ap_int<15> m109;
ap_int<8> m110;
ap_int<13> m111;
ap_int<16> m112;
ap_int<11> m113;

m31 = in13 * in4;
m32 = in21 * in14;
m33 = in26 * in25;
m34 = in16 + in20;
m35 = in19 * in30;
m36 = in10 * in16;
m37 = in13 * in10;
m38 = in9 * m35;
m39 = m38 + m32;
m40 = m32 * in30;
m41 = in13 * in28;
m42 = in29 * m36;
m43 = in19 * in28;
m44 = m33 + in30;
m45 = m41 * in24;
m46 = in18 + m45;
m47 = in22 * m35;
m48 = m37 * m43;
m49 = in26 * in23;
m50 = m43 * m48;
m51 = m47 * in22;
m52 = in27 + m35;
m53 = m47 * m31;
m54 = m50 * m31;
m55 = m40 * m41;
m56 = in29 * m42;
m57 = in29 * m50;
m58 = m32 * m31;
m59 = m49 * m47;
m60 = m39 + m36;
m61 = m32 * m40;
m62 = m46 * m33;
m63 = m55 + m42;
m64 = m45 * m41;
m65 = m39 * m62;
m66 = m45 * m44;
m67 = m55 + m55;
m68 = m53 * m54;
m69 = m56 + m65;
m70 = m49 * m56;
m71 = m50 + m47;
m72 = m43 * m66;
m73 = m43 * m44;
m74 = m47 + m61;
m75 = m73 * m61;
m76 = m57 + m54;
m77 = m59 * m57;
m78 = m56 + m68;
m79 = m78 * m57;
m80 = m59 * m62;
m81 = m70 * m73;
m82 = m75 * m54;
m83 = m70 * m71;
m84 = m74 * m71;
m85 = m75 * m75;
m86 = m67 * m68;
m87 = m77 * m71;
m88 = m66 * m78;
m89 = m78 * m81;
m90 = m84 * m88;
m91 = m75 * m80;
m92 = m64 * m82;
m93 = m77 * m72;
m94 = m78 * m81;
m95 = m79 * m69;
m96 = m75 * m67;
m97 = m69 * m90;
m98 = m95 * m74;
m99 = m75 * m78;
m100 = m81 + m99;
m101 = m88 * m90;
m102 = m95 * m89;
m103 = m96 + m94;
m104 = m100 * m90;
m105 = m88 + m98;
m106 = m91 * m105;
m107 = m86 + m83;
m108 = m100 * m106;
m109 = m105 + m88;
m110 = m105 * m103;
m111 = m83 * m89;
m112 = m93 + m85;
m113 = m83 * m85;

out_data[0] = m34;
out_data[1] = m51;
out_data[2] = m52;
out_data[3] = m58;
out_data[4] = m60;
out_data[5] = m63;
out_data[6] = m76;
out_data[7] = m87;
out_data[8] = m92;
out_data[9] = m97;
out_data[10] = m101;
out_data[11] = m102;
out_data[12] = m104;
out_data[13] = m107;
out_data[14] = m108;
out_data[15] = m109;
out_data[16] = m110;
out_data[17] = m111;
out_data[18] = m112;
out_data[19] = m113;


}
    